# demo COMBAT 
# author: Fengjiao li
# Documentation: https://rdrr.io/bioc/sva/man/ComBat.html

rm(list=ls())
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(version = "3.17")
library(BiocManager)
BiocManager::install("sva")
BiocManager::install("SingleCellExperiment")
library(sva)
library(SingleCellExperiment)
BiocManager::install("singleCellTK")
install.packages("MatrixModels")
library(MatrixModels)
library(singleCellTK)
library(Seurat)
packageVersion('Seurat')
install.packages("cowplot")
library(cowplot)
library(matrixStats)
this.dir <- '/Users/fengjiao.li/Desktop/demo_ComBat/'
setwd(this.dir)
data_dir <- '/Users/fengjiao.li/Desktop/dataset1/'
base_name <- 'combat_dataset1/'
dir.create(base_name, showWarnings = FALSE)
# load evaluation & preprocess utils files #
utils_dir <- '/Users/fengjiao.li/Desktop/ComBat/'
source(paste0(utils_dir,'ComBat_seq.R'))
source(paste0(utils_dir,'ComBat_functions.R'))
source(paste0(utils_dir,'helper_seq.R'))
TPM_file<-'dataset1_sm_uc3.txt'  # replace by link to dataset
sample_file<-'sample_sm_uc3.txt' # replace by link to dataset
myData <- read.table(paste0(data_dir,TPM_file),sep="\t",header=T,row.names=1,check.names=F)
mySample <- read.table(paste0(data_dir,sample_file),sep="\t",header=T,row.names=1,check.names=F)
table(mySample$batch)
table(mySample$celltype)
############################质量控制Quality control############################
# Pre-filtering data 
# Func as.matrix() can not work with big data, divide big matrix into small parts and do filtering
# Normalize each library to the median of the transcript counts across all cells 
# Then, log transform expression values 
myFilteredData <- filter_data_mtx(myData, base_name, is_filter_cells=TRUE,min_genes=300, 
                                  is_filter_genes=TRUE, min_cells=20)
lengths_list <- lengths(myFilteredData)
all_equal <- all(lengths_list == lengths_list[1])
matrix_data <- do.call(rbind, myFilteredData)
row_max <- matrixStats::rowMaxs(matrix_data)
row_min = matrixStats::rowMins(matrix_data)
if(sum(row_max==row_min)>0){
  myFilteredData = myFilteredData[row_max != row_min,]
}

cells_use <- colnames(myFilteredData)
mySample <- mySample[cells_use, ]
table(mySample$batch,mySample$celltype)
myFilteredData_matrix=as.matrix(myFilteredData)
########raw output##################
# Create Seurat object to compute umap, pca
raw_srt <- CreateSeuratObject(counts = myFilteredData, project = "dataset1_raw", min.cells = 0, min.features = 0)
dim(raw_srt@assays$RNA)
cells_use <- colnames(raw_srt@assays$RNA)
raw_srt@meta.data$batch <- mySample$batch
raw_srt@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = raw_srt, slot = "counts"))
min(GetAssayData(object = raw_srt, slot = "counts"))
raw.counts = GetAssayData(object = raw_srt, slot = "counts")
raw_srt<- SetAssayData(object = raw_srt, slot = "scale.data", 
                       new.data = as.matrix(raw.counts))
raw_srt <- RunPCA(object = raw_srt,features = rownames(raw_srt@assays$RNA))  

# Visualization

raw_srt<- RunUMAP(raw_srt, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_raw_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(raw_srt, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(raw_srt, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(raw_srt, file = paste0(base_name,"raw1_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/raw1_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(raw_srt, reduction = 'pca'))
PCAembedding$celltype <- raw_srt$celltype
PCAembedding$batch <- raw_srt$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_raw_pca.csv"))
## We need new functions for calculate the coefficient beta
library(singleCellTK)
sce_obj <- SingleCellExperiment(assays=list(counts=myFilteredData_matrix),colData=mySample)
cellind=colData(sce_obj)$celltype
batchind=colData(sce_obj)$batch
######第一种评价指标#####################
ssq1 <- function(x,batch,cell){
  mod <- lm(x~as.factor(batch)+as.factor(cell))
  av <- anova(mod)
  result <- av$`Sum Sq`
  return(result)
}
expvar=t(apply(assay(sce_obj,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
r_raw_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_raw_all 
ss[2]
ss[1]
## Tables: cell type versus batch
table(colData(sce_obj)$batch, colData(sce_obj)$celltype)
table(colData(sce_obj)$celltype)
############################# Batch effect Correct############################
####################
## ComBat-seq 
## First option, opt1 <- 'parametric/'
# par.prior=TRUE, prior.plots=FALSE
counts_subset <- assay(sce_obj,"counts")
sample_subset <- colData(sce_obj)
batch_subset <- colData(sce_obj)$batch
combat_seq_output = ComBat_seq(counts_subset, batch=batch_subset, group=NULL, covar_mod=NULL, shrink=FALSE,par_prior=TRUE, prior_plots=FALSE)
sce_obj_corr<- SingleCellExperiment(assays=list(counts=combat_seq_output),colData=sample_subset)
###########第一种指标######
expvar=t(apply(assay(sce_obj_corr,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
ss
r_combatseq_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_combatseq_all
ss[2]
ss[1]
## Calculate the beta coefficients for ComBat-seq
beta_combatseq_all <- r_combatseq_all/r_raw_all
beta_combatseq_all 
# Create Seurat object to compute umap, pca
combat_srt <- CreateSeuratObject(counts = combat_seq_output, project = "dataset1_combatseq", min.cells = 0, min.features = 0)
dim(combat_srt@assays$RNA)
cells_use <- colnames(combat_srt@assays$RNA)
combat_srt@meta.data$batch <- mySample$batch
combat_srt@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = combat_srt, slot = "counts"))
min(GetAssayData(object = combat_srt, slot = "counts"))
raw.counts = GetAssayData(object = combat_srt, slot = "counts")
combat_srt <- SetAssayData(object = combat_srt, slot = "scale.data", 
                           new.data = as.matrix(raw.counts))
combat_srt <- RunPCA(object = combat_srt,features = rownames(combat_srt@assays$RNA))  

# Visualization
combat_srt <- RunUMAP(combat_srt, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_combatseq_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(combat_srt, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(combat_srt, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(combat_srt, file = paste0(base_name,"combatseq1_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/combatseq1_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(combat_srt, reduction = 'pca'))
PCAembedding$celltype <- combat_srt$celltype
PCAembedding$batch <- combat_srt$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_combatseq_pca.csv"))
##########################################ComBat-Cell-seq######################################
mod_cell_typ = model.matrix(~as.factor(celltype), data=sample_subset)
combat_cell_output = ComBat_seq(counts_subset, batch=batch_subset, group=NULL, covar_mod=mod_cell_typ,full_mod=TRUE, shrink=FALSE,par_prior=TRUE, prior_plots=FALSE)
sce_obj_corr_cell <- SingleCellExperiment(assays=list(counts=combat_cell_output),colData=sample_subset)
########第一种指标##########
expvar=t(apply(assay(sce_obj_corr_cell,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
ss
r_combatcellseq_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_combatcellseq_all
ss[2]
ss[1]
## Calculate the beta coefficients for ComBat-seq
beta_combatseqcell_all <- r_combatcellseq_all/r_raw_all
beta_combatseqcell_all 
########Combat-cell-seq output##################
# Create Seurat object to compute umap, pca
combat_srt1 <- CreateSeuratObject(counts = combat_cell_output, project = "dataset1_combatcellseq", min.cells = 0, min.features = 0)
dim(combat_srt1@assays$RNA)
cells_use <- colnames(combat_srt1@assays$RNA)
combat_srt1@meta.data$batch <- mySample$batch
combat_srt1@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = combat_srt1, slot = "counts"))
min(GetAssayData(object = combat_srt1, slot = "counts"))
raw.counts = GetAssayData(object = combat_srt1, slot = "counts")
combat_srt1 <- SetAssayData(object = combat_srt1, slot = "scale.data", 
                            new.data = as.matrix(raw.counts))
combat_srt1 <- RunPCA(object = combat_srt1,features = rownames(combat_srt1@assays$RNA))  

# Visualization

combat_srt1 <- RunUMAP(combat_srt1, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_combat-cell-seq_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(combat_srt1, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(combat_srt1, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(combat_srt1, file = paste0(base_name,"combatcellseq_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/combatcellseq_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(combat_srt1, reduction = 'pca'))
PCAembedding$celltype <- combat_srt1$celltype
PCAembedding$batch <- combat_srt1$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_combatcellseq_pca.csv"))
########################################## ComBat-SVA-Seq###################################
mod = model.matrix(~as.factor(batch), data=sample_subset)
mod0 = model.matrix(~1,data=sample_subset)
svobj_filt = svaseq(counts_subset+ 1,mod,mod0,n.sv=10)
sample_SVA <- sample_subset
sample_SVA$SV1 = svobj_filt$sv[,1]
sample_SVA$SV2 = svobj_filt$sv[,2]
sample_SVA$SV3 = svobj_filt$sv[,3]
sample_SVA$SV4 = svobj_filt$sv[,4]
sample_SVA$SV5 = svobj_filt$sv[,5]
sample_SVA$SV6 = svobj_filt$sv[,6]
sample_SVA$SV7 = svobj_filt$sv[,7]
sample_SVA$SV8 = svobj_filt$sv[,8]
sample_SVA$SV9 = svobj_filt$sv[,9]
sample_SVA$SV10 = svobj_filt$sv[,10]
sce_obj_with_SVs <- SingleCellExperiment(assays=list(counts=counts_subset),colData=sample_SVA)
## Select the important surrogate variables only; Selection by checking the boxplots
variables <- c("SV1", "SV2", "SV3", "SV4", "SV5", "SV6", "SV7", "SV8")

for (var in variables) {
  filename <- paste0(var, "_boxplot.png")
  
  png(filename, width=1200, height=1200)
  
  formula <- as.formula(paste(var, "~ celltype"))
  boxplot(formula, data=sample_SVA, ylim=c(-0.1, 0.1))
  
  dev.off()
}

## Now use ComBat-seq with the surrogate variables 
mod_SVA = model.matrix(~sample_SVA$SV1+sample_SVA$SV2+sample_SVA$SV5,data=sample_SVA)
combat_SVA_seq = ComBat_seq(counts_subset, batch=batch_subset, group=NULL, covar_mod=mod_SVA, shrink=FALSE)
sce_obj_corr_SVA <- SingleCellExperiment(assays=list(counts=combat_SVA_seq),colData=sample_subset)
##########第一种指标#########
expvar=t(apply(assay(sce_obj_corr_SVA,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
ss
r_combatsvaseq_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_combatsvaseq_all
## Calculate the beta coefficients for ComBat-seq
beta_combatsvaseq_all <- r_combatsvaseq_all/r_raw_all
beta_combatsvaseq_all 
ss[2]
ss[1]
##################combat_SVA_seq ######
# Create Seurat object to compute umap, pca
combat_srt2 <- CreateSeuratObject(counts = combat_SVA_seq , project = "dataset1_combatsvaseq", min.cells = 0, min.features = 0)
dim(combat_srt2@assays$RNA)
cells_use <- colnames(combat_srt2@assays$RNA)
combat_srt2@meta.data$batch <- mySample$batch
combat_srt2@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = combat_srt2, slot = "counts"))
min(GetAssayData(object = combat_srt2, slot = "counts"))
raw.counts = GetAssayData(object = combat_srt2, slot = "counts")
combat_srt2 <- SetAssayData(object = combat_srt2, slot = "scale.data", 
                            new.data = as.matrix(raw.counts))
combat_srt2<- RunPCA(object = combat_srt2,features = rownames(combat_srt2@assays$RNA))  

# Visualization

combat_srt2<- RunUMAP(combat_srt2, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_combat-sva-seq_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(combat_srt2, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(combat_srt2, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(combat_srt2, file = paste0(base_name,"combatsvaseq_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/combatsvaseq_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(combat_srt2, reduction = 'pca'))
PCAembedding$celltype <- combat_srt2$celltype
PCAembedding$batch <- combat_srt2$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_combatsvaseq_pca.csv"))
########Combat##########
counts_subset <- assay(sce_obj,"counts")
sample_subset <- colData(sce_obj)
batch_subset <- colData(sce_obj)$batch
combat_output=ComBat(counts_subset, batch=batch_subset,mod = NULL,par.prior = TRUE,prior.plots = FALSE)
sce_obj_co<- SingleCellExperiment(assays=list(counts=combat_output),colData=sample_subset)
expvar=t(apply(assay(sce_obj_co,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
ss
r_combat_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_combat_all
ss[2]
ss[1]
## Calculate the beta coefficients for ComBat
beta_combat_all <- r_combat_all/r_raw_all
beta_combat_all 
# Create Seurat object to compute umap, pca
combat_srt3 <- CreateSeuratObject(counts = combat_output , project = "dataset1_combat", min.cells = 0, min.features = 0)
dim(combat_srt3@assays$RNA)
cells_use <- colnames(combat_srt3@assays$RNA)
combat_srt3@meta.data$batch <- mySample$batch
combat_srt3@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = combat_srt3, slot = "counts"))
min(GetAssayData(object = combat_srt3, slot = "counts"))
raw.counts = GetAssayData(object = combat_srt3, slot = "counts")
combat_srt3 <- SetAssayData(object = combat_srt3, slot = "scale.data", 
                            new.data = as.matrix(raw.counts))
combat_srt3<- RunPCA(object = combat_srt3,features = rownames(combat_srt3@assays$RNA))  

# Visualization

combat_srt3<- RunUMAP(combat_srt3, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_combat_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(combat_srt3, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(combat_srt3, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(combat_srt3, file = paste0(base_name,"combat_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/combat_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(combat_srt3, reduction = 'pca'))
PCAembedding$celltype <- combat_srt3$celltype
PCAembedding$batch <- combat_srt3$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_combat_pca.csv"))
########Combat_cell##########
mod_celltype= model.matrix(~as.factor(celltype), data=sample_subset)
combat_cell_output=ComBat(counts_subset, batch=batch_subset,mod = mod_celltype,par.prior = TRUE,prior.plots = FALSE)
sce_obj_cell<- SingleCellExperiment(assays=list(counts=combat_cell_output),colData=sample_subset)
expvar=t(apply(assay(sce_obj_cell,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
ss
r_combat_cell_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_combat_cell_all
ss[2]
ss[1]
## Calculate the beta coefficients for ComBat-cell
beta_combat_cell_all <- r_combat_cell_all/r_raw_all
beta_combat_cell_all 
combat_srt4 <- CreateSeuratObject(counts = combat_cell_output , project = "dataset1_combat", min.cells = 0, min.features = 0)
dim(combat_srt4@assays$RNA)
cells_use <- colnames(combat_srt4@assays$RNA)
combat_srt4@meta.data$batch <- mySample$batch
combat_srt4@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = combat_srt4, slot = "counts"))
min(GetAssayData(object = combat_srt4, slot = "counts"))
raw.counts = GetAssayData(object = combat_srt4, slot = "counts")
combat_srt4 <- SetAssayData(object = combat_srt4, slot = "scale.data", 
                            new.data = as.matrix(raw.counts))
combat_srt4<- RunPCA(object = combat_srt4,features = rownames(combat_srt4@assays$RNA))  

# Visualization

combat_srt4<- RunUMAP(combat_srt4, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_combat_cell_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(combat_srt4, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(combat_srt4, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(combat_srt4, file = paste0(base_name,"combatcell_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/combatcell_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(combat_srt4, reduction = 'pca'))
PCAembedding$celltype <- combat_srt4$celltype
PCAembedding$batch <- combat_srt4$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_combatcell_pca.csv"))
###########Combat-SVA##########
mod_SVA = model.matrix(~sample_SVA$SV1+sample_SVA$SV2+sample_SVA$SV5,data=sample_SVA)
combat_SVA = ComBat(counts_subset, batch=batch_subset,mod=mod_SVA)
sce_obj_SVA <- SingleCellExperiment(assays=list(counts=combat_SVA),colData=sample_subset)
expvar=t(apply(assay(sce_obj_SVA,"counts"),1,ssq1,batch=batchind,cell=cellind))
colnames(expvar)=c("batch","cell","residual")
ss=apply(expvar,2,sum) ## This is the sum of all SS across all the genes
ss
r_combatsva_all <- ss[2]/ss[1] ## This is the overall ratio between cell and batch 
r_combatsva_all
## Calculate the beta coefficients for ComBat-seq
beta_combatsva_all <- r_combatsva_all/r_raw_all
beta_combatsva_all 
ss[2]
ss[1]
combat_srt5 <- CreateSeuratObject(counts = combat_SVA , project = "dataset1_combat", min.cells = 0, min.features = 0)
dim(combat_srt5@assays$RNA)
cells_use <- colnames(combat_srt5@assays$RNA)
combat_srt5@meta.data$batch <- mySample$batch
combat_srt5@meta.data$celltype <- mySample$celltype

max(GetAssayData(object = combat_srt5, slot = "counts"))
min(GetAssayData(object = combat_srt5, slot = "counts"))
raw.counts = GetAssayData(object = combat_srt5, slot = "counts")
combat_srt5 <- SetAssayData(object = combat_srt5, slot = "scale.data", 
                            new.data = as.matrix(raw.counts))
combat_srt5<- RunPCA(object = combat_srt5,features = rownames(combat_srt5@assays$RNA))  

# Visualization

combat_srt5<- RunUMAP(combat_srt5, reduction = 'pca', dims = 1:20)
png(paste(base_name, "umap_combat_SVA_parametric.png", sep = ""), width = 2*1000, height = 2*500, res = 2*72)
p1 <- DimPlot(combat_srt5, reduction = 'umap', group.by = "batch")
p2 <- DimPlot(combat_srt5, reduction = 'umap',group.by = "celltype")
cowplot::plot_grid(p1, p2)
dev.off()
save(combat_srt5, file = paste0(base_name,"combatsva_seurat_objs.rda"))
load("~/Desktop/demo_ComBat/combat_dataset1/combatsva_seurat_objs.rda")
PCAembedding = data.frame(Embeddings(combat_srt5, reduction = 'pca'))
PCAembedding$celltype <- combat_srt5$celltype
PCAembedding$batch <- combat_srt5$batch
write.csv(PCAembedding, file = paste0(base_name,"dataset1_combatsva_pca.csv"))

